OpenCV's `cv2.VideoWriter` does not provide direct control over the Constant Quality (CQ) parameters for H.264 encoding. However, you can indirectly control the quality by adjusting the bitrate. The higher the bitrate, the better the quality (at the expense of a larger file size). Here's an updated version of the code that allows you to specify the bitrate for H.264 encoding:

```python
import os
import glob
from PIL import Image
import cv2

def create_slideshow(input_folder, output_file, width, height, fps, duration, bitrate):
    # Create a temporary folder for resized images
    temp_folder = 'temp_images'
    os.makedirs(temp_folder, exist_ok=True)

    # Find all JPG images in the folder tree
    image_files = glob.glob(os.path.join(input_folder, '**/*.jpg'), recursive=True)

    # Resize and save each image as a temporary file
    for i, image_file in enumerate(image_files):
        img = Image.open(image_file)
        img = img.resize((width, height), Image.ANTIALIAS)

        temp_file = os.path.join(temp_folder, f'resized_{i}.jpg')
        img.save(temp_file)

    # Calculate frame count based on duration and fps
    frame_count = int(fps * duration)

    # Create video writer object with AVC encoding and specified bitrate
    fourcc = cv2.VideoWriter_fourcc(*'avc1')
    video_writer = cv2.VideoWriter(output_file, fourcc, fps, (width, height), isColor=True)
    video_writer.set(cv2.VIDEOWRITER_PROP_QUALITY, bitrate)

    # Read each resized image and write it to the video for the specified duration
    for i, image_file in enumerate(image_files):
        temp_file = os.path.join(temp_folder, f'resized_{i}.jpg')
        img = cv2.imread(temp_file)

        # Write the same image multiple times to achieve the desired duration
        for _ in range(frame_count):
            video_writer.write(img)

    # Release the video writer and delete temporary files
    video_writer.release()
    cv2.destroyAllWindows()
    for temp_file in glob.glob(os.path.join(temp_folder, '*.jpg')):
        os.remove(temp_file)
    os.rmdir(temp_folder)

# Example usage
input_folder = 'path/to/input/folder'
output_file = 'path/to/output/video.mp4'
width = 640  # Desired width of each image in the slideshow
height = 480  # Desired height of each image in the slideshow
fps = 30  # Frames per second of the video
duration = 3  # Duration (in seconds) to display each image
bitrate = 800000  # Specify the desired bitrate (adjust as needed)

create_slideshow(input_folder, output_file, width, height, fps, duration, bitrate)
```

In this updated code, I added a `bitrate` parameter to the `create_slideshow` function. The `bitrate` parameter allows you to specify the desired bitrate for the video. Higher bitrates generally result in better quality (but larger file sizes), while lower bitrates reduce file size (but can result in lower quality).

To adjust the quality, you can experiment with different bitrate values. Higher bitrates, such as `1000000` or `2000000`, generally result in better quality, while lower bitrates, such as `500000` or `100000`, reduce file size but may result in slightly lower quality.

Remember to replace `'path/to/input/folder'` and `'path/to/output/video.mp4'` with the actual paths you're using for the input folder and output video file, respectively


```

In this updated code, I added a `duration` parameter to the `create_slideshow` function. This parameter specifies the duration (in seconds) that each image should be displayed in the resulting video. 

To achieve the desired duration, the code calculates the `frame_count` by multiplying the desired duration by the frames per second (fps). Then, for each image, it writes the same image multiple times to the video to achieve the desired duration.

Make sure to replace `'path/to/input/folder'` and `'path/to/output/video.mp4'` with the actual paths you're using for the input folder and output video file, respectively. Adjust the `width`, `height`, `fps`, and `duration` variables according to your preferences.

Let me know if you have any further questions!


Certainly! Here's a list of the dependencies required for the script:

1. PIL (Pillow): It is used for image manipulation and resizing.
   - To install: Run `pip install pillow`.

2. OpenCV (cv2): It is used for video encoding and writing frames to the video.
   - To install: Run `pip install opencv-python`.

These are the main dependencies needed for the script. However, depending on your system configuration, you may also need additional dependencies such as FFmpeg for video encoding support. If you encounter any specific errors related to missing codecs or libraries during the execution of the script, you can install them as necessary.

To install the dependencies assuming you're using standalone Python, follow these steps:

1. Open a terminal or command prompt.

2. Run the following command to install PIL (Pillow):

   ```
   pip install pillow
   ```

3. After that, run the following command to install OpenCV (cv2):

   ```
   pip install opencv-python
   ```

These commands will install the required dependencies for the script to run. If any additional dependencies are needed, you can install them as per the error messages you encounter.

Remember to replace `'path/to/input/folder'` and `'path/to/output/video.mp4'` with the actual paths you're using for the input folder and output video file, respectively. Adjust the `width`, `height`, `fps`, and `duration` variables according to your preferences.

Let me know if you have any further questions!


When using OpenCV for H.264 MP4 video creation, you need to ensure that your OpenCV installation is compiled with FFmpeg support, which provides the necessary codecs. The `opencv-python` package alone does not include FFmpeg support by default. Here's what you can do to install the required dependencies:

1. Install `opencv-python-headless` package: This package includes the main functionality of OpenCV without graphical user interface (GUI) support.

   ```shell
   pip install opencv-python-headless
   ```

2. Install FFmpeg: FFmpeg is a multimedia framework that provides codecs and tools for handling various multimedia formats, including H.264. Install FFmpeg by following the appropriate instructions for your operating system:

   - **Windows**: Download a static build of FFmpeg from the official website (https://www.ffmpeg.org/) and add the FFmpeg binary folder to your system's PATH environment variable.
   - **macOS**: Use Homebrew to install FFmpeg by running the following command:

     ```shell
     brew install ffmpeg
     ```

   - **Linux**: Use your package manager to install FFmpeg. The package name may vary depending on your distribution. For example, on Ubuntu, you can use:

     ```shell
     sudo apt-get install ffmpeg
     ```

By installing `opencv-python-headless` and FFmpeg, you should have the necessary dependencies to create H.264 MP4 videos using OpenCV. Remember to use the updated code provided earlier in our conversation to ensure the correct codec is used.

If you encounter any further issues or have additional questions, please let me know!
